<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ include file="EF.Utility.CS.ttinclude"#><# 
	CodeGenerationTools code = new CodeGenerationTools(this);
	MetadataTools ef = new MetadataTools(this);
	MetadataLoader loader = new MetadataLoader(this);
	CodeRegion region = new CodeRegion(this);

	string inputFile = @"..\..\..\..\Entity\Seyehat\Seyehat.edmx"; // Her UnitOfWork için bu kısım düzeltilecek.
	EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);

	string namespaceName = code.VsNamespaceSuggestion();

	EntityContainer container = ItemCollection.GetItems<EntityContainer>().FirstOrDefault();
	if (container == null)
	{
		return "// No EntityContainer exists in the model, so no code was generated";
	}
#>
using System;
using System.Data.Objects;

<#
if (!String.IsNullOrEmpty(namespaceName))
{
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
    using Common;
    using Entity.Common;    
    using Entity.Seyehat; <#/* Her UnitOfWork için bu kısım düzeltilecek. */#>
    
<#
    PushIndent(CodeRegion.GetIndent(1));
}
#>

<#=Accessibility.ForType(container)#> class SeyehatUnitOfWork : ISeyehatUnitOfWork <#/* Her UnitOfWork için bu kısım düzeltilecek. */#>

{
    #region Fields

	private readonly <#=code.Escape(container)#> _context;

    #endregion

	#region Constructors

    public SeyehatUnitOfWork() 
        : this(new <#=code.Escape(container)#>()) <# /* Her UnitOfWork için bu kısım düzeltilecek. */ #>

    {

    }

    public SeyehatUnitOfWork(<#=code.Escape(container)#> context) <# /* Her UnitOfWork için bu kısım düzeltilecek. */ #>

    {
        _context = context;

<#
		region.Begin("Instantiation of Repositories", 3);
#>

<#
	foreach (EntitySet entitySet in container.BaseEntitySets.OfType<EntitySet>())
	{
#>
	    <#= FixRepositoryName(code.Escape(entitySet.ElementType))#> = GetLazyRepository<<#=code.Escape(entitySet.ElementType)#>>(_context);
<#
    }

		region.End();
#>
    }

	#endregion

<#
		region.Begin("Private Repositories", 0);
#>

<#
		foreach (EntitySet entitySet in container.BaseEntitySets.OfType<EntitySet>())
		{
#>
	private readonly Lazy<IRepository<<#=code.Escape(entitySet.ElementType)#>>> <#= FixRepositoryName(code.Escape(entitySet.ElementType))#>;
<#
        }

		region.End();
#>

<#
		region.Begin("Public Properties", 1);

		foreach (EntitySet entitySet in container.BaseEntitySets.OfType<EntitySet>())
		{
#>

	<#=Accessibility.ForReadOnlyProperty(entitySet)#> virtual IRepository<<#=code.Escape(entitySet.ElementType)#>> <#=code.Escape(entitySet.ElementType)#>
    {
        get { return <#= FixRepositoryName(code.Escape(entitySet.ElementType))#>.Value; }
    }
<#
        }

		region.End();		
#>

    #region Save Changes - IUnitOfWork

     public void Save()
     {
         _context.SaveChanges();
     }

    #endregion

    #region Helper Methods

    private static Lazy<IRepository<TEntity>> GetLazyRepository<TEntity>(ObjectContext context) where TEntity : class, IEntity
    {
        return new Lazy<IRepository<TEntity>>(() => new SqlRepository<TEntity>(context));
    }

    #endregion
}
<#  ClearIndent(); #>
}
<#+

    private string FixRepositoryName(string name)
    {
        return String.Format("_{0}{1}Repository", Char.ToLower(name[0]), name.Substring(1));
    }
#>